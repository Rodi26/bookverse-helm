name: Handle Platform Release Dispatch

on:
  repository_dispatch:
    types: [platform_release]

permissions:
  contents: write

jobs:
  pin_and_package:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Derive AppTrust context
        env:
          JFROG_URL: ${{ vars.JFROG_URL }}
          JFROG_ADMIN_TOKEN: ${{ secrets.JFROG_ADMIN_TOKEN }}
        run: |
          BASE="${JFROG_URL%/}"
          echo "APPTRUST_BASE_URL=${BASE}/apptrust/api/v1" >> "$GITHUB_ENV"
          echo "APPTRUST_ACCESS_TOKEN=${JFROG_ADMIN_TOKEN}" >> "$GITHUB_ENV"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install PyYAML

      - name: Resolve platform components from AppTrust
        id: resolve
        env:
          PLATFORM_APP: bookverse-platform
          PLATFORM_VERSION: ${{ github.event.client_payload.platform_version || github.event.client_payload.tag }}
        run: |
          python - << 'PY'
          import os, json, urllib.request, urllib.parse
          base=os.environ.get('APPTRUST_BASE_URL','').rstrip('/')
          token=os.environ.get('APPTRUST_ACCESS_TOKEN','')
          app=os.environ['PLATFORM_APP']
          version=os.environ['PLATFORM_VERSION']
          req=urllib.request.Request(
            url=f"{base}/applications/{urllib.parse.quote(app)}/versions/{urllib.parse.quote(version)}/content",
            headers={"Authorization": f"Bearer {token}", "Accept": "application/json"}
          )
          with urllib.request.urlopen(req, timeout=30) as resp:
            data=json.loads(resp.read().decode('utf-8'))
          # expect data to include sources.versions or equivalent structure
          # write to file for next step
          with open('platform_components.json','w') as f:
            json.dump(data, f)
          print("::set-output name=ok::true")
          PY

      - name: Pin image tags in values files (prefer platform.version, also set per-service tags)
        run: |
          python - << 'PY'
          import json, yaml
          comp=json.load(open('platform_components.json'))
          # For demo simplicity, assume we know mapping service->values keys
          mapping={
            'bookverse-inventory':'inventory',
            'bookverse-recommendations':'recommendations',
            'bookverse-checkout':'checkout',
            'bookverse-web':'web',
          }
          # Extract versions from sources.versions if present
          versions={}
          src=comp.get('sources',{}).get('versions',[])
          for v in src:
            ak=v.get('application_key') or v.get('application') or ''
            ver=v.get('version')
            if ak and ver:
              versions[ak]=ver
          def update_file(path):
            y=yaml.safe_load(open(path))
            plat_ver = comp.get('version') or comp.get('platform_version')
            if plat_ver:
              y.setdefault('platform', {})['version']=str(plat_ver)
            for ak,svc in mapping.items():
              ver=versions.get(ak)
              if ver:
                y.setdefault(svc, {})['tag']=str(ver)
            with open(path,'w') as f:
              yaml.safe_dump(y, f, sort_keys=False)
          for p in ['charts/platform/values-dev.yaml','charts/platform/values-qa.yaml','charts/platform/values-staging.yaml','charts/platform/values-prod.yaml']:
            update_file(p)
          PY

      - name: Commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(platform): pin image tags for platform release ${{ github.event.client_payload.platform_version }}"

      - name: Helm lint and package
        run: |
          helm lint charts/platform
          helm package charts/platform --destination dist


